### Starting build.
# Target: src/extend.ml.depends, tags: { I, bin_annot, camlp, debug, extension:ml, file:src/extend.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_pa_extend, use_q_MLast }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o pa_extend.cmo q_MLast.cmo' -modules src/extend.ml > src/extend.ml.depends
# Target: src/extend.cmo, tags: { I, bin_annot, byte, camlp, compile, debug, extension:cmo, extension:ml, file:src/extend.cmo, file:src/extend.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_pa_extend, use_q_MLast }
ocamlfind ocamlc -c -g -bin-annot -I +camlp5 -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o pa_extend.cmo q_MLast.cmo' -I src -o src/extend.cmo src/extend.ml
# Target: src/Main.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Main.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Main.ml > src/Main.ml.depends
# Target: src/Ast.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Ast.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Ast.mli > src/Ast.mli.depends
# Target: src/Symbol.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Symbol.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Symbol.mli > src/Symbol.mli.depends
# Target: src/Identifier.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Identifier.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Identifier.mli > src/Identifier.mli.depends
# Target: src/Types.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Types.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Types.mli > src/Types.mli.depends
# Target: src/Identifier.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Identifier.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Identifier.cmi src/Identifier.mli
# Target: src/Types.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Types.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Types.cmi src/Types.mli
# Target: src/Symbol.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Symbol.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Symbol.cmi src/Symbol.mli
# Target: src/Compile.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Compile.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Compile.mli > src/Compile.mli.depends
# Target: src/Ast.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Ast.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Ast.cmi src/Ast.mli
# Target: src/Error.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Error.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Error.mli > src/Error.mli.depends
# Target: src/Lexer.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Lexer.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Lexer.mli > src/Lexer.mli.depends
# Target: src/Parser.mly.depends, tags: { bin_annot, debug, extension:mly, file:src/Parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' src/Parser.mly > src/Parser.mly.depends
# Target: src/Parser.mly, tags: { bin_annot, byte, compile, debug, extension:ml, extension:mly, file:src/Parser.ml, file:src/Parser.mly, infer, menhir, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), parser, quiet, traverse, use_camlp5, use_extend }
menhir --ocamlc 'ocamlfind ocamlc -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -I src' --infer src/Parser.mly
# Target: src/Parser.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Parser.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Parser.mli > src/Parser.mli.depends
# Target: src/Parser.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Parser.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Parser.cmi src/Parser.mli
# Target: src/Semantics.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Semantics.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Semantics.mli > src/Semantics.mli.depends
# Target: src/Compile.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Compile.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Compile.cmi src/Compile.mli
# Target: src/Error.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Error.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Error.cmi src/Error.mli
# Target: src/Lexer.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Lexer.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Lexer.cmi src/Lexer.mli
# Target: src/Semantics.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Semantics.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Semantics.cmi src/Semantics.mli
# Target: src/Main.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Main.cmo, file:src/Main.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Main.cmo src/Main.ml
# Target: src/Ast.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Ast.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Ast.ml > src/Ast.ml.depends
# Target: src/Compile.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Compile.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Compile.ml > src/Compile.ml.depends
# Target: src/Compile_expr.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Compile_expr.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Compile_expr.mli > src/Compile_expr.mli.depends
# Target: src/Scope.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Scope.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Scope.mli > src/Scope.mli.depends
# Target: src/Utils.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Utils.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Utils.mli > src/Utils.mli.depends
# Target: src/Compile_expr.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Compile_expr.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Compile_expr.cmi src/Compile_expr.mli
# Target: src/Scope.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Scope.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Scope.cmi src/Scope.mli
# Target: src/Utils.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Utils.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Utils.cmi src/Utils.mli
# Target: src/Error.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Error.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Error.ml > src/Error.ml.depends
# Target: src/Lexer.mll, tags: { bin_annot, debug, extension:mll, file:src/Lexer.mll, lexer, ocaml, ocamllex, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse }
/usr/bin/ocamllex -q src/Lexer.mll
# Target: src/Lexer.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Lexer.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Lexer.ml > src/Lexer.ml.depends
# Target: src/Parser.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Parser.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Parser.ml > src/Parser.ml.depends
# Target: src/Semantics.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Semantics.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Semantics.ml > src/Semantics.ml.depends
# Target: src/Frames.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Frames.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Frames.mli > src/Frames.mli.depends
# Target: src/Sem_expr.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Sem_expr.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Sem_expr.mli > src/Sem_expr.mli.depends
# Target: src/Frames.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Frames.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Frames.cmi src/Frames.mli
# Target: src/Sem_expr.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Sem_expr.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Sem_expr.cmi src/Sem_expr.mli
# Target: src/Ast.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Ast.cmo, file:src/Ast.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Ast.cmo src/Ast.ml
# Target: src/Compile.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Compile.cmo, file:src/Compile.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Compile.cmo src/Compile.ml
# Target: src/Error.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Error.cmo, file:src/Error.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Error.cmo src/Error.ml
# Target: src/Lexer.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Lexer.cmo, file:src/Lexer.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Lexer.cmo src/Lexer.ml
# Target: src/Parser.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Parser.cmo, file:src/Parser.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Parser.cmo src/Parser.ml
# Target: src/Semantics.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Semantics.cmo, file:src/Semantics.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Semantics.cmo src/Semantics.ml
# Target: src/Symbol.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Symbol.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Symbol.ml > src/Symbol.ml.depends
# Target: src/Types.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Types.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Types.ml > src/Types.ml.depends
# Target: src/Symbol.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Symbol.cmo, file:src/Symbol.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Symbol.cmo src/Symbol.ml
# Target: src/Types.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Types.cmo, file:src/Types.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Types.cmo src/Types.ml
# Target: src/Identifier.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Identifier.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Identifier.ml > src/Identifier.ml.depends
# Target: src/Hashcons.mli.depends, tags: { bin_annot, debug, extension:mli, file:src/Hashcons.mli, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Hashcons.mli > src/Hashcons.mli.depends
# Target: src/Hashcons.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:src/Hashcons.mli, interf, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Hashcons.cmi src/Hashcons.mli
# Target: src/Identifier.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Identifier.cmo, file:src/Identifier.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Identifier.cmo src/Identifier.ml
# Target: src/Hashcons.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Hashcons.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Hashcons.ml > src/Hashcons.ml.depends
# Target: src/Hashcons.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Hashcons.cmo, file:src/Hashcons.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Hashcons.cmo src/Hashcons.ml
# Target: src/Compile_expr.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Compile_expr.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Compile_expr.ml > src/Compile_expr.ml.depends
# Target: src/Scope.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Scope.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Scope.ml > src/Scope.ml.depends
# Target: src/Utils.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Utils.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Utils.ml > src/Utils.ml.depends
# Target: src/Compile_expr.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Compile_expr.cmo, file:src/Compile_expr.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Compile_expr.cmo src/Compile_expr.ml
# Target: src/Scope.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Scope.cmo, file:src/Scope.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Scope.cmo src/Scope.ml
# Target: src/Utils.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Utils.cmo, file:src/Utils.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Utils.cmo src/Utils.ml
# Target: src/Sem_expr.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Sem_expr.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Sem_expr.ml > src/Sem_expr.ml.depends
# Target: src/Sem_expr.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Sem_expr.cmo, file:src/Sem_expr.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Sem_expr.cmo src/Sem_expr.ml
# Target: src/Frames.ml.depends, tags: { bin_annot, debug, extension:ml, file:src/Frames.ml, ocaml, ocamldep, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamldep -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -modules src/Frames.ml > src/Frames.ml.depends
# Target: src/Frames.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/Frames.cmo, file:src/Frames.ml, implem, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), quiet, traverse, use_camlp5, use_extend }
ocamlfind ocamlc -c -g -bin-annot -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm -pp 'camlp5o src/extend.cmo' -I src -o src/Frames.cmo src/Frames.ml
# Target: src/Main.byte, tags: { bin_annot, byte, debug, dont_link_with, extension:byte, file:src/Main.byte, link, ocaml, package(cmdliner), package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm.target), package(str), program, quiet, traverse }
ocamlfind ocamlc -linkpkg -g -package cmdliner -package llvm.all_backends -package llvm.scalar_opts -package llvm.target -package llvm.executionengine -package str -package llvm.analysis -package llvm src/Error.cmo src/Hashcons.cmo src/Identifier.cmo src/Types.cmo src/Symbol.cmo src/Ast.cmo src/Scope.cmo src/Utils.cmo src/Sem_expr.cmo src/Compile_expr.cmo src/Compile.cmo src/Parser.cmo src/Lexer.cmo src/Frames.cmo src/Semantics.cmo src/Main.cmo -o src/Main.byte
# Compilation successful.
